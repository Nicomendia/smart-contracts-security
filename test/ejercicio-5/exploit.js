const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Ejercicio 5", function () {

  let deployer, atacante;

  beforeEach(async function () {

    [deployer, atacante] = await ethers.getSigners();

    // Se deploya el contrato
    const VaultV3 = await ethers.getContractFactory("VaultV3", deployer);
    this.vault = await VaultV3.deploy();

    // Se depositan 100 ETH en el contrato
    await this.vault.deposit({ value: ethers.utils.parseEther('100') });
    expect(
      await this.vault.deposits(deployer.address)
    ).to.eq(ethers.utils.parseEther('100'));

    expect(
      await ethers.provider.getBalance(this.vault.address)
    ).to.eq(ethers.utils.parseEther('100'));
  });

  it("Ataque", async function () {
    // COMPLETAR
    // Desplegamos el contrato atacante
    const VaultV3Attacker = await ethers.getContractFactory("VaultV3Attacker", atacante);
    this.contratoAtacante = await VaultV3Attacker.deploy(this.vault.address);
    // Depositamos un monto pequeno
    await this.contratoAtacante.attack({ value: ethers.utils.parseEther('10') });
    // Consultamos saldo de contrato atacante
    //let balanceCttoAtacante = await ethers.provider.getBalance(this.contratoAtacante.address);
    // Crear una funcion withdraw del contrato
  });

  afterEach(async function() {
    expect(
      await ethers.provider.getBalance(this.vault.address)
    ).to.eq('0');
  });
});
